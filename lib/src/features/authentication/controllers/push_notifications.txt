import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_core/firebase_core.dart';
// import 'package:cloud_functions/cloud_functions.dart';

class PushNotifications {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

  static Future<void> init() async {
    await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      provisional: false,
      sound: true,
      criticalAlert: false,
      announcement: true,
      carPlay: false,
    );

    await _initializeLocalNotifications();

    // Handle incoming messages when the app is in the foreground
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
  }

  static Future<void> _initializeLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    final DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings();
    final InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );
    await _flutterLocalNotificationsPlugin.initialize(initializationSettings);
  }

  static void _handleForegroundMessage(RemoteMessage message) {
    RemoteNotification? notification = message.notification;
    AndroidNotification? android = message.notification?.android;

    if (notification != null && android != null) {
      _flutterLocalNotificationsPlugin.show(
        notification.hashCode,
        notification.title,
        notification.body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance_channel',
            'High Importance Notifications',
            importance: Importance.max,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
          ),
        ),
      );
    }
  }

//   static Future<void> sendNotificationToArtisan(String shopId, String shopName, String customerEmail) async {
//     try {
//       final HttpsCallable callable = FirebaseFunctions.instance.httpsCallable('sendNotification');
//       await callable.call({
//         'topic': 'artisan_$shopId',
//         'title': 'New Booking',
//         'body': 'A new booking has been made for $shopName by $customerEmail',
//         'data': {
//           'type': 'new_booking',
//           'shopName': shopName,
//           'customerEmail': customerEmail,
//         },
//       });
//     } catch (e) {
//       print('Error sending notification: $e');
//     }
//   }

//   static Future<void> sendNotificationToCustomer(String customerEmail, String shopName, String status) async {
//     try {
//       final HttpsCallable callable = FirebaseFunctions.instance.httpsCallable('sendNotification');
//       await callable.call({
//         'topic': 'customer_${customerEmail.replaceAll('@', '_')}',
//         'title': 'Booking Update',
//         'body': 'Your booking for $shopName has been $status',
//         'data': {
//           'type': 'booking_update',
//           'shopName': shopName,
//           'status': status,
//         },
//       });
//     } catch (e) {
//       print('Error sending notification: $e');
//     }
//   }
}

class FCMService {
  static Future<void> subscribeToTopic(String topic) async {
    await FirebaseMessaging.instance.subscribeToTopic(topic);
  }

  static Future<void> unsubscribeFromTopic(String topic) async {
    await FirebaseMessaging.instance.unsubscribeFromTopic(topic);
  }
}